import {  Logger } from '@nestjs/common';
import { Store } from "./Store";

export class VBucket {
    private readonly logger = new Logger(VBucket.name, { timestamp: true });

    stores: Map<string, Store> // USe the LRUCache lib instead

    /**
    * Initializes a new instance of the VBucket class with an empty map of stores.
    */
    constructor() {
        this.stores = new Map<string, Store>();
    }

    /**
     * Adds a store to the VBucket by the given key.
     * @param key the key to add the store to
     * @param Store the store to add
     */
    addStore(key: string, Store: Store) {
        this.logger.debug('adding store with key: ${key}');
        this.stores.set(key, Store);
    }

    /**
     * Retrieves the store associated with the given key, or undefined if no store exists
     * @param key the key to retrieve the store for
     * @returns the store associated with the given key, or undefined if no store exists
     */
    getStore(key: string): Store | undefined {
        this.logger.debug('adding store with key: ${key}');
        let hashedKey = this.hash(key).toString()
        this.logger.debug('hashed key key: ${hashedKey}');

        return this.stores.get(hashedKey);
    }

    /**
     * Deletes the store associated with the given key, if it exists.
     * @param key the key of the store to delete
     */
    deleteStore(key: string) {
        this.logger.debug('deleting store with key: ${hashedKey}');
        this.stores.delete(key);
    }   

    /**
     * Checks if a store with the given key exists in the VBucket.
     * @param key the key to check
     * @returns true if a store with the given key exists, false otherwise
     */
    hasStore(key: string): boolean {
        let result = this.stores.has(key);
        this.logger.debug(' store with key: ${key} exists: ${result}');
        return result;
    }   

    /**
     * A simple hash function that takes a string and returns a number between 0 and 9.
     * The hash is generated by summing the character codes of each character in the string
     * and taking the remainder when divided by 10.
     * @param str the string to hash
     * @returns a number between 0 and 9
     */
    hash(str: string): number {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
          hash += str.charCodeAt(i);
        }
        return hash % 10;
      }
}