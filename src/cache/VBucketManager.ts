import {  Logger } from '@nestjs/common';
import { Store } from "./Store";

export class VBucketManager
 {
    private readonly logger = new Logger(VBucketManager.name, { timestamp: true });
    private vbuckets: Map<string, Store>;

    constructor() {
        this.vbuckets= new Map<string, Store>();
    }
    
    /**
     * Initializes the VBucketManager by creating 26 new stores.
     * The stores are identified by a string key between '0' and '25'.
     * The initializeBuckets method is called in the constructor of the VBucketManager.
     */
    initializeBuckets() {
        this.logger.debug('initializing buckets');
        for (let i = 0; i < 26; i++) {
            this.vbuckets.set(i.toString(), new Store()); 
        }
        this.logger.debug(this.vbuckets);
    }

    /**
     * Gets the store associated with the given key.
     * The store is identified by the hashed key, which is the key hashed by the hash function.
     * @param key the key to retrieve the store for
     * @returns the store associated with the given key
     */
    getStore(key: string): Store {
        let hashedKey = this.hash(key).toString()
        let store = this.getStoreById(hashedKey);
        this.logger.debug('getting store for key: ${key} and hashedKey: ${hashedKey}');
        return store
    }

    /**
     * Gets the store associated with the given key.
     * If the key is not associated with a store, an error is thrown.
     * @param key the key to retrieve the store for
     * @returns the store associated with the given key
     * @throws {Error} if no store is associated with the given key
     */
    getStoreById(key: string): Store {
        this.logger.debug('getting store for key: ${key}');

        if (!this.vbuckets.has(key)) {
            this.logger.debug('no store for key: ${key}');
            throw new Error('no store for key: ${key}');
        }
        return this.vbuckets.get(key) as Store;
    }
    /**
     * Returns a map of all stores in the VBucketManager, keyed by string identifiers between '0' and '25'.
     * @returns a map of all stores in the VBucketManager
     */
    getAllStores(): Map<string, Store> {
        this.logger.debug('getting all stores');
        this.logger.debug(this.vbuckets);
        return this.vbuckets;
    }

    /**
     * A simple hash function that takes a string and returns a number between 0 and 9.
     * The hash is generated by summing the character codes of each character in the string
     * and taking the remainder when divided by 10.
     * @param str the string to hash
     * @returns a number between 0 and 9
     */
    hash(str: string): number {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
          hash += str.charCodeAt(i);
        }
        return hash % 10;
      }
}       